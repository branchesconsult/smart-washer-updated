<?php

use App\Exceptions\GeneralException;
use App\Helpers\uuid;
use App\Http\Utilities\SendEmail;
use App\Models\Notification\Notification;
use App\Models\Settings\Setting;
use Carbon\Carbon as Carbon;

/**
 * Henerate UUID.
 *
 * @return uuid
 */
function generateUuid()
{
    return uuid::uuid4();
}

if (!function_exists('homeRoute')) {

    /**
     * Return the route to the "home" page depending on authentication/authorization status.
     *
     * @return string
     */
    function homeRoute()
    {
        if (access()->allow('view-backend')) {
            return 'admin.dashboard';
        } elseif (auth()->check()) {
            return 'frontend.user.dashboard';
        }

        return 'frontend.index';
    }
}

/*
 * Global helpers file with misc functions.
 */
if (!function_exists('app_name')) {
    /**
     * Helper to grab the application name.
     *
     * @return mixed
     */
    function app_name()
    {
        return config('app.name');
    }
}

if (!function_exists('access')) {
    /**
     * Access (lol) the Access:: facade as a simple function.
     */
    function access()
    {
        return app('access');
    }
}

if (!function_exists('history')) {
    /**
     * Access the history facade anywhere.
     */
    function history()
    {
        return app('history');
    }
}

if (!function_exists('gravatar')) {
    /**
     * Access the gravatar helper.
     */
    function gravatar()
    {
        return app('gravatar');
    }
}

if (!function_exists('includeRouteFiles')) {

    /**
     * Loops through a folder and requires all PHP files
     * Searches sub-directories as well.
     *
     * @param $folder
     */
    function includeRouteFiles($folder)
    {
        $directory = $folder;
        $handle = opendir($directory);
        $directory_list = [$directory];

        while (false !== ($filename = readdir($handle))) {
            if ($filename != '.' && $filename != '..' && is_dir($directory . $filename)) {
                array_push($directory_list, $directory . $filename . '/');
            }
        }

        foreach ($directory_list as $directory) {
            foreach (glob($directory . '*.php') as $filename) {
                require $filename;
            }
        }
    }
}

if (!function_exists('getRtlCss')) {

    /**
     * The path being passed is generated by Laravel Mix manifest file
     * The webpack plugin takes the css filenames and appends rtl before the .css extension
     * So we take the original and place that in and send back the path.
     *
     * @param $path
     *
     * @return string
     */
    function getRtlCss($path)
    {
        $path = explode('/', $path);
        $filename = end($path);
        array_pop($path);
        $filename = rtrim($filename, '.css');

        return implode('/', $path) . '/' . $filename . '.rtl.css';
    }
}

if (!function_exists('settings')) {
    /**
     * Access the settings helper.
     */
    function settings()
    {
        // Settings Details
        $settings = Setting::latest()->first();
        if (!empty($settings)) {
            return $settings;
        }
    }
}

// Creating Notification
if (!function_exists('createNotification')) {
    /**
     * create new notification.
     *
     * @param  $message    message you want to show in notification
     * @param  $userId     To Whom You Want To send Notification
     * @param  $type       type of notification (1 - dashboard, 2 - email, 3 - both) (by default 1)
     * @param  $option     associate array [ 'data' => $data, 'email_template_type' => $template_type ]
     *
     * @return object
     */
    function createNotification($message, $userId, $type = 1, $options = [])
    {
        if ($type == 1 || $type == 3) {
            $notification = new Notification();

            return $notification->insert([
                'message' => $message,
                'user_id' => $userId,
                'type' => $type,
                'created_at' => Carbon::now(),
            ]);
        }
        if ($type == 2 || $type == 3) {
            if (!empty($options['data']) && !empty($options['email_template_type'])) {
                $mail = new SendEmail();
                $emailResult = $mail->sendWithTemplate($options['data'], $options['email_template_type']);
            } else {
                throw new GeneralException('Invalid input given.option array shold contains data and email_template_type');
            }
        }
    }
}

if (!function_exists('escapeSlashes')) {
    /**
     * Access the escapeSlashes helper.
     */
    function escapeSlashes($path)
    {
        $path = str_replace('\\', DIRECTORY_SEPARATOR, $path);
        $path = str_replace('//', DIRECTORY_SEPARATOR, $path);
        $path = trim($path, DIRECTORY_SEPARATOR);

        return $path;
    }
}

if (!function_exists('getMenuItems')) {
    /**
     * Converts items (json string) to array and return array.
     */
    function getMenuItems($type = 'backend', $id = null)
    {
        $menu = new \App\Models\Menu\Menu();
        $menu = $menu->where('type', $type);
        if (!empty($id)) {
            $menu = $menu->where('id', $id);
        }
        $menu = $menu->first();
        if (!empty($menu) && !empty($menu->items)) {
            return json_decode($menu->items);
        }

        return [];
    }
}

if (!function_exists('getRouteUrl')) {
    /**
     * Converts querystring params to array and use it as route params and returns URL.
     */
    function getRouteUrl($url, $url_type = 'route', $separator = '?')
    {
        $routeUrl = '';
        if (!empty($url)) {
            if ($url_type == 'route') {
                if (strpos($url, $separator) !== false) {
                    $urlArray = explode($separator, $url);
                    $url = $urlArray[0];
                    parse_str($urlArray[1], $params);
                    $routeUrl = route($url, $params);
                } else {
                    $routeUrl = route($url);
                }
            } else {
                $routeUrl = $url;
            }
        }

        return $routeUrl;
    }
}

if (!function_exists('renderMenuItems')) {
    /**
     * render sidebar menu items after permission check.
     */
    function renderMenuItems($items, $viewName = 'backend.includes.partials.sidebar-item')
    {
        foreach ($items as $item) {
            // if(!empty($item->url) && !Route::has($item->url)) {
            //     return;
            // }
            if (!empty($item->view_permission_id)) {
                if (access()->allow($item->view_permission_id)) {
                    echo view($viewName, compact('item'));
                }
            } else {
                echo view($viewName, compact('item'));
            }
        }
    }
}

if (!function_exists('isActiveMenuItem')) {
    /**
     * checks if current URL is of current menu/sub-menu.
     */
    function isActiveMenuItem($item, $separator = '?')
    {
        $item->clean_url = $item->url;
        if (strpos($item->url, $separator) !== false) {
            $item->clean_url = explode($separator, $item->url, -1);
        }
        if (Active::checkRoutePattern($item->clean_url)) {
            return true;
        }
        if (!empty($item->children)) {
            foreach ($item->children as $child) {
                $child->clean_url = $child->url;
                if (strpos($child->url, $separator) !== false) {
                    $child->clean_url = explode($separator, $child->url, -1);
                }
                if (Active::checkRoutePattern($child->clean_url)) {
                    return true;
                }
            }
        }

        return false;
    }
}


function uploadInputs($inputName, $type = 'picture')
{
    $files = $inputName;
    $uploadPath = [];
    if (is_array($files)) {
        foreach ($files as $file) {
            $destinationPath = make_dir($type);
            $uploadPath[] = Illuminate\Support\Facades\Storage::disk('public')
                ->put($destinationPath, $file);
        }
    } else {
        //echo $type;die;
        $destinationPath = make_dir($type);
        //$uploadPath = $inputName->move(Illuminate\Support\Facades\Storage::disk('uploads')->getDriver()->getAdapter()->getPathPrefix(), 'MytstName.mp3');
        $uploadPath = Illuminate\Support\Facades\Storage::disk('public')->put($destinationPath, $files);
    }
    return $uploadPath;
}


/**
 * Making directory
 * @param type $fileType
 * @return string
 */
function make_dir($fileType)
{
    $uploadRootPath = public_path('photos' . DIRECTORY_SEPARATOR . 'users');//$fileType . '/' . date('Y') . '/' . date('M');
    $uploadDir = $uploadRootPath;
    if (!is_dir($uploadDir)) {
        //Illuminate\Support\Facades\File::makeDirectory($uploadDir, 0777, true, true);
        @\File::makeDirectory($uploadDir, 0755, true, true);
    }
    return $uploadDir;
}


function invoice_num($input, $pad_len = 7, $prefix = null)
{
    if ($pad_len <= strlen($input))
        trigger_error('<strong>$pad_len</strong> cannot be less than or equal to the length of <strong>$input</strong> to generate invoice number', E_USER_ERROR);

    if (is_string($prefix))
        return sprintf("%s%s", $prefix, str_pad($input, $pad_len, "0", STR_PAD_LEFT));

    return str_pad($input, $pad_len, "0", STR_PAD_LEFT);
}

function debugArr($arr)
{
    echo '<pre>';
    print_r($arr);
    echo '</pre>';
}

/**
 * @array $token
 * @string $message
 * @string $notifyID
 * @return mixed
 */
function sendPushNotificationToFCMSever($token, $message, $notifyID = NULL, $linkTo = 'orderDetail')
{
    $path_to_firebase_cm = 'https://fcm.googleapis.com/fcm/send';

    $fields = array(
        'registration_ids' => $token,
        'priority' => 10,
        'notification' => [
            'title' => env('APP_NAME'),
            'body' => $message,
            'sound' => 'Default',
            'linkTo' => $linkTo,
            //'image' => 'Notification Image',
            'object' => [
                'order_id' => $notifyID
            ]
        ],
    );
    $headers = array(
        'Authorization:key=' . env('FCM_SERVER_KEY'),
        'Content-Type:application/json'
    );

    // Open connection
    $ch = curl_init();
    // Set the url, number of POST vars, POST data
    curl_setopt($ch, CURLOPT_URL, $path_to_firebase_cm);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));
    // Execute post
    $result = curl_exec($ch);
    // Close connection
    curl_close($ch);
    return json_decode($result);
}


function splitName($string)
{
    $splitName = explode(' ', $string, 2);
    $splitName['first_name'] = $splitName[0];
    $splitName['last_name'] = $splitName[1] ?? NULL;
    return $splitName;
}


function getDays()
{
    return [
        '1' => 'Mon',
        '2' => 'Tue',
        '3' => 'Wed',
        '4' => 'Thu',
        '5' => 'Fri',
        '6' => 'Sat',
        '7' => 'Sun',
    ];
}